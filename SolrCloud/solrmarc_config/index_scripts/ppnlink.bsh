import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.Subfield;
import org.marc4j.marc.DataField;

Set getPPNLinks(Record record)
    {

        Set result = new LinkedHashSet();

        List fields = record.getDataFields();
        for (DataField field : fields)
        {
          List sf = field.getSubfields('w');
          Iterator i = sf.iterator();
          while (i.hasNext()) {
            Subfield ppnlink = (Subfield)i.next();
            String ppn = ppnlink.getData();
            if (ppn.matches("\\(DE-601\\).*") || ppn.matches("\\(DE-627\\).*")) {
                ppn = ppn.toUpperCase().replaceAll("\\(DE-\\d{3}\\)", "");
                ppn = ppn.toUpperCase().replaceAll("\\(DE-B\\d{4}\\)", "");
                result.add(ppn);
              }
            }
        }

        return result;
    }

Set get016Links(Record record)
    {
        Set result = new LinkedHashSet();
        List fields = record.getVariableFields("016");
        if (fields != null) {
            Iterator fieldsIter = fields.iterator();
            while(fieldsIter.hasNext()) {
                field = (DataField)fieldsIter.next();
                linkfield = field.getSubfield('a');
                sysfield = field.getSubfield('2');
                if (linkfield != null && sysfield != null) {
                    result.add("(" + sysfield.getData() + ")" + linkfield.getData().replaceAll("[^0-9a-zA-z]",""));
                }
            }
        }
/*        List fields = record.getVariableFields("035");
        if (fields != null) {
            Iterator fieldsIter = fields.iterator();
            while(fieldsIter.hasNext()) {
                field = (DataField)fieldsIter.next();
                linkfield = field.getSubfield('a');
                if (linkfield != null)  {
                    result.add(linkfield.getData().replaceAll("[^0-9a-zA-z()]",""));
                }
            }

        } */
        return result;
    }

/*
    public Set<String> getPPNLink(final Record record) throws Exception {
        Set<String> result = new LinkedHashSet<String>();
        DataField link;
        link = (DataField)record.getVariableField("773");
        if(link != null) {
        if(link.getSubfield('w').getData() != null) {
          String ppnf = link.getSubfield('w').getData();
          String ppn = ppnf.substring(0,9);
          DataField collection;
          collection = (DataField)record.getVariableField("084");
          String coll = collection.getSubfield('a').getData();
          result.add(makeIdPrefix(coll) + "@" + ppn);
        }
        }
        return result;
    }
*/

Set getNormLinks(Record record)
    {

        Set result = new LinkedHashSet();

        List fields = record.getDataFields();
        for (DataField field : fields)
        {
          List sf = field.getSubfields('0');
          Iterator i = sf.iterator();
          while (i.hasNext()) {
            Subfield ppnlink = (Subfield)i.next();
            String ppn = ppnlink.getData();
            ppn = ppn.toUpperCase().replaceAll("\\(DE-\\d{3}\\)", "");
            result.add(ppn);
          }
        }
        return result;
    }

Set getNormPrefixLinks(Record record)
    {

        Set result = new LinkedHashSet();

        List fields = record.getDataFields();
        for (DataField field : fields)
        {
          List sf = field.getSubfields('0');
          Iterator i = sf.iterator();
          while (i.hasNext()) {
            Subfield ppnlink = (Subfield)i.next();
            String ppn = ppnlink.getData();
            result.add(ppn);
          }
        }
        return result;
    }

Set getNormLinksRole(Record record, String idfirst)
    {

        Set result = new LinkedHashSet();
        List fields = record.getDataFields();

        for (DataField field : fields)
        {
            List sf = field.getSubfields('0');
            Iterator i = sf.iterator();
            while (i.hasNext()) {
                Subfield ppnlink = (Subfield)i.next();
                String ppn = ppnlink.getData();
                if (ppn.matches("\\(DE-588\\)(.*)")) {
                    gndID = ppn;
                    List sf4s = field.getSubfields('4');
                    if (sf4s != null && !sf4s.isEmpty()) {
                         for (Subfield sf4 : sf4s) {
                             if (idfirst.equals("last")) {
                                 result.add("@@" + sf4.getData() + "@@" + gndID);
                             } else {
                                 result.add(gndID + "@@" + sf4.getData() + "@@");
                             }          
                         }
                    } else {
                        if (idfirst.equals("last")) {
                            result.add("@@" + field.getTag() + "@@" + gndID);
                        } else {
                            result.add(gndID + "@@" + field.getTag() + "@@");
                        }
                    }
                }
             }
        
        }
        return result;
    }

Set getPPNLinkwithTag(Record record, String idfirst)
    {

        Set result = new LinkedHashSet();
        List fields = record.getDataFields();

        for (DataField field : fields)
        {
            List sf = field.getSubfields('w');
            Iterator i = sf.iterator();
            while (i.hasNext()) {
                Subfield ppnlink = (Subfield)i.next();
                String ppn = ppnlink.getData();
                if (ppn.matches("\\(DE-627\\)(.*)")) {
                    if (idfirst.equals("last")) {
                       result.add("@@" + field.getTag() + "@@" + ppn);
                    } else {
                        result.add(ppn + "@@" + field.getTag() + "@@");
                    }
                }
             }

        }
        return result;
    }

